/*
                             888888888               888888888     
                           88:::::::::88           88:::::::::88   
                         88:::::::::::::88       88:::::::::::::88 
                        8::::::88888::::::8     8::::::88888::::::8
                        8:::::8     8:::::8     8:::::8     8:::::8
                        8:::::8     8:::::8     8:::::8     8:::::8
                         8:::::88888:::::8       8:::::88888:::::8 
                          8:::::::::::::8         8:::::::::::::8  
                         8:::::88888:::::8       8:::::88888:::::8 
                        8:::::8     8:::::8     8:::::8     8:::::8
                        8:::::8     8:::::8     8:::::8     8:::::8
                        8:::::8     8:::::8     8:::::8     8:::::8
                        8::::::88888::::::8     8::::::88888::::::8
                         88:::::::::::::88       88:::::::::::::88 
                           88:::::::::88           88:::::::::88   
                             888888888               888888888   

------------------------------------------------------------------------------------------
                        CAB403 Assignment 2 - Simulator Header File
------------------------------------------------------------------------------------------

Group: 88
Team Member: Dane Madsen
Student ID: n10983864
Student Email: n10983864@qut.edu.au

The roles of the simulator:
● Simulate cars:
    ○ A simulated car receives a random license plate (sometimes on the list,
    sometimes not) and queues up at a random entrance to the car park,
    triggering an LPR when it reaches the front of the queue.

    ○ After triggering the LPR, the simulated car will watch the digital sign. If the
    sign contains a number, it will keep note of that number (the level where the
    car has been instructed to park) and then wait for the boom gate to open. If
    the sign contains any other character, the simulated car will just leave the
    queue and drive off, disappearing from the simulation.

    ○ After the boom gate opens, the car will drive to the level it was instructed to
    drive to, triggering the level LPR in the process.

    ○ The car will then park for a random amount of time.

    ○ After the car has finished parking, it will leave, setting off the level LPR again.
    It will then drive towards a random exit. Upon reaching that exit, it will set off
    the exit LPR and wait for the boom gate to open. Once the boom gate is
    open, it will leave the car park and disappear from the simulation.

● Simulate boom gates:
    ○ Boom gates take a certain amount of time to open and close. Once the
    manager has instructed a closed boom gate to open or an open boom gate to
    close, the simulator’s job is to wait for a small amount of time before putting
    the boom gate into the open/closed state.

● Simulate temperature:
    ○ Each level of the car park has a temperature sensor, sending back the current
    temperature (in degrees celsius). The simulator will frequently update these
    values with reasonable random values. The simulator should also be able to
    simulate a fire by generating higher values, in order to test / demonstrate the
    fire alarm system.

Simulator timings:
● Every 1-100ms*, a new car will be generated by the simulator with a random license
plate, and will start moving towards a random entrance.

● Once a car reaches the front of the queue, it will wait 2ms before triggering the
entrance LPR.

● Boom gates take 10ms to fully open and 10ms to fully close.

● After the boom gate is open, the car takes another 10ms to drive its parking space
(triggering the level LPR for the first time).

● Once parked, the car will wait 100-10000ms before departing the level (and triggering
the level LPR for the second time).

● It then takes the car a further 10ms to drive to a random exit and trigger the exit LPR.

● Every 1-5ms, the temperature on each level will change to a random value.
*/

#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <pthread.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include "common.h"

int shm_fd;
struct CarPark* Parking;

struct Car entrance_queue[ENTRANCES][LEVEL_CAPACITY];
pthread_mutex_t entrance_queue_lock[ENTRANCES];
pthread_cond_t entrance_queue_condition[ENTRANCES];

struct Car exit_queue[EXITS][LEVEL_CAPACITY];
pthread_mutex_t exit_queue_lock[EXITS];
pthread_cond_t exit_queue_condition[EXITS];

struct Car parked_cars[LEVELS*LEVEL_CAPACITY];
pthread_mutex_t parked_cars_mlock;
pthread_cond_t parked_cars_condition;

pthread_t car_generator_loop_thread;
pthread_t entrance_loop_thread[ENTRANCES];
pthread_t exit_loop_threads[EXITS];
pthread_t car_sorter_loop_thread;

void new_car();
void add_car(struct Car Auto);
void get_next_car(struct Car *Auto);
struct Car move_queue(struct Car Queue[LEVEL_CAPACITY], int entry);
void enter_car(int entry);
void exit_car(int ext);

void generate_plate(char* plate);
void get_random_plate_from_file(char* plate);
void get_random_plate(char* plate);
void send_plate(char plate[6], struct LicencePlateRecognition *LPR);

char get_display(struct InformationSign sign);
void open_boom_gate(struct BoomGate *boom_gate);
void close_boom_gate(struct BoomGate *boom_gate);
void send_to_random_entrance(struct Car Auto);
void send_to_random_exit(struct Car Auto);

void *car_generator_loop(void *arg);
void *car_sorter_loop(void *arg);
void *entrance_loop(void *arg);
void *exit_loop(void *arg);